<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCHDevice.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCHDevice</TokenIdentifier>
			<Abstract type="html">The CCHDevice class is used work with devices.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCHDevice/sharedInstance</TokenIdentifier>
			<Abstract type="html">The singleton instance of CCHDevice.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">The singleton instance of CCHDevice.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHDevice/deviceId</TokenIdentifier>
			<Abstract type="html">The vendor device id as UUIDString.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>- (NSString *)deviceId</Declaration>
			
			<ReturnValue><Abstract type="html">The vendor device id as UUIDString.</Abstract></ReturnValue>
			<Anchor>//api/name/deviceId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHDevice/getDeviceWithId:completionHandler:</TokenIdentifier>
			<Abstract type="html">Gets a device from ContextHub using the device Id.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>- (void)getDeviceWithId:(NSString *)deviceId completionHandler:(void ( ^ ) ( NSDictionary *device , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceId</Name>
					<Abstract type="html">The id of the device stored in ContextHub.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Called when the request completes. The block is passed an NSDictionary object that represents the device.  If an error occurs, the NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getDeviceWithId:completionHandler:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHDevice/getDevicesWithAlias:completionHandler:</TokenIdentifier>
			<Abstract type="html">Gets devices from ContextHub using the device alias.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>- (void)getDevicesWithAlias:(NSString *)alias completionHandler:(void ( ^ ) ( NSArray *devices , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>alias</Name>
					<Abstract type="html">The alias associated with the devices that you are interested in.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Called when the request completes. The block is passed an NSArray of NSDictionary objects that represent the devices.  If an error occurs, the NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getDevicesWithAlias:completionHandler:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHDevice/getDevicesWithTags:completionHandler:</TokenIdentifier>
			<Abstract type="html">Gets devices from ContextHub using tags.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>- (void)getDevicesWithTags:(NSArray *)tags completionHandler:(void ( ^ ) ( NSArray *devices , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>tags</Name>
					<Abstract type="html">Tags of the devices that you are interested in.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Called when the request completes. The block is passed an NSArray of NSDictionary objects that represent the devices.  If an error occurs, the NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getDevicesWithTags:completionHandler:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHDevice/getDevicesWithTags:operator:completionHandler:</TokenIdentifier>
			<Abstract type="html">Gets devices from ContextHub using tags.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>- (void)getDevicesWithTags:(NSArray *)tags operator:(NSString *)tagOperator completionHandler:(void ( ^ ) ( NSArray *devices , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>tags</Name>
					<Abstract type="html">Tags of the devices that you are interested in.</Abstract>
				</Parameter><Parameter>
					<Name>tagOperator</Name>
					<Abstract type="html">(optional) Operator used to build the query with the tags.  Passing ANY will find all devices that match any of the tags. Passing ALL will find devices that have all of the tags provided.  Passing nil will use the default ALL operator.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Called when the request completes. The block is passed an NSArray of NSDictionary objects that represent the devices.  If an error occurs, the NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getDevicesWithTags:operator:completionHandler:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHDevice/setDeviceAlias:tags:completionHandler:</TokenIdentifier>
			<Abstract type="html">Updates the device record on contexthub.</Abstract>
			<DeclaredIn>CCHDevice.h</DeclaredIn>
			
			<Declaration>- (void)setDeviceAlias:(NSString *)alias tags:(NSArray *)tags completionHandler:(void ( ^ ) ( NSDictionary *device , NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>alias</Name>
					<Abstract type="html">(optional) The alias associated with the device.</Abstract>
				</Parameter><Parameter>
					<Name>tags</Name>
					<Abstract type="html">(optional) The tags to be applied to the device.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Called when the request completes. The block is passed an NSDictionary object that represents the device.  If an error occurs, the NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDeviceAlias:tags:completionHandler:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
	</File>
</Tokens>