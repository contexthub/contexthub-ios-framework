<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCHPush.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCHPush</TokenIdentifier>
			<Abstract type="html">The push service is used to register devices and to send push notifications with the ContextHub Push service.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
            
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCHPush/sharedInstance</TokenIdentifier>
			<Abstract type="html">@ return The singleton instance of the CCHPush service.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/registerDeviceToken:alias:tags:completionHandler:</TokenIdentifier>
			<Abstract type="html">  Register a device for push notifications.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)registerDeviceToken:(id)token alias:(NSString *)alias tags:(NSArray *)tags completionHandler:(void ( ^ ) ( NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>token</Name>
					<Abstract type="html">The device token.</Abstract>
				</Parameter><Parameter>
					<Name>alias</Name>
					<Abstract type="html">(optional) A string alias to associate with the device token. (pass nil to ignore value, @&quot;&quot; to remove current alias)</Abstract>
				</Parameter><Parameter>
					<Name>tags</Name>
					<Abstract type="html">(optional) An array of tags to associate with the token. (pass nil to ignore value, @[] to remove all current tags)</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">(optional) returns nil if succeeded otherwise includes an error object.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerDeviceToken:alias:tags:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/updateAlias:tags:completionHandler:</TokenIdentifier>
			<Abstract type="html">Update a device&apos;s alias and tags.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)updateAlias:(NSString *)alias tags:(NSArray *)tags completionHandler:(void ( ^ ) ( NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>alias</Name>
					<Abstract type="html">(optional) A string alias to associate with the device token. (pass &quot;nil&quot; to ignore value, @&quot;&quot; to remove current alias)</Abstract>
				</Parameter><Parameter>
					<Name>tags</Name>
					<Abstract type="html">(optional) An array of tags to associate with the token. (pass nil to ignore value, @[] to remove all current tags)</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">(optional) returns nil if succeeded otherwise includes an error object.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateAlias:tags:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/sendNotificationToDevices:userInfo:completionHandler:</TokenIdentifier>
			<Abstract type="html">Send Push Notifications to devices.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)sendNotificationToDevices:(NSArray *)devices userInfo:(NSDictionary *)userInfo completionHandler:(void ( ^ ) ( NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>devices</Name>
					<Abstract type="html">The device ids to notify.</Abstract>
				</Parameter><Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The data to be sent in the notification.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Completion block.  If an error occurs an NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendNotificationToDevices:userInfo:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/sendNotificationToAliases:userInfo:completionHandler:</TokenIdentifier>
			<Abstract type="html">Send Push Notification to aliases.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)sendNotificationToAliases:(NSArray *)aliases userInfo:(NSDictionary *)userInfo completionHandler:(void ( ^ ) ( NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>aliases</Name>
					<Abstract type="html">The aliases to notify.</Abstract>
				</Parameter><Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The data to be sent in the notification. Exclude devices by passing an array of device IDs in the @&quot;excludedeviceids&quot; key.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Completion block.  If an error occurs an NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendNotificationToAliases:userInfo:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/sendNotificationToTags:userInfo:completionHandler:</TokenIdentifier>
			<Abstract type="html">Send Push Notification to tags.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)sendNotificationToTags:(NSArray *)tags userInfo:(NSDictionary *)userInfo completionHandler:(void ( ^ ) ( NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>tags</Name>
					<Abstract type="html">The tags to notify.</Abstract>
				</Parameter><Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The data to be sent in the notification. Exclude devices by passing an array of device IDs in the @&quot;excludedeviceids&quot; key.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Completion block.  If an error occurs an NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendNotificationToTags:userInfo:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/sendNotificationToTags:operator:userInfo:completionHandler:</TokenIdentifier>
			<Abstract type="html">Send Push Notification to tags.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)sendNotificationToTags:(NSArray *)tags operator:(NSString *)tagOperator userInfo:(NSDictionary *)userInfo completionHandler:(void ( ^ ) ( NSError *error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>tags</Name>
					<Abstract type="html">The tags to notify.</Abstract>
				</Parameter><Parameter>
					<Name>tagOperator</Name>
					<Abstract type="html">(optional) Operator used to build the query with the tags.  Passing ANY will find all geofences that match any of the tags. Passing ALL will find geofences that have all of the tags provided.  Passing nil will use the default ALL operator.</Abstract>
				</Parameter><Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The data to be sent in the notification. Exclude devices by passing an array of device IDs in the @&quot;excludedeviceids&quot; key.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Completion block.  If an error occurs an NSError will be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendNotificationToTags:operator:userInfo:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHPush/application:didReceiveRemoteNotification:completionHandler:</TokenIdentifier>
			<Abstract type="html">When contextual elements are changed, ContextHub will send background push notifications to the application letting you know that new content is available.
This will allow the context events to update and stay in sync with the server.</Abstract>
			<DeclaredIn>CCHPush.h</DeclaredIn>
			
			<Declaration>- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo completionHandler:(void ( ^ ) ( enum UIBackgroundFetchResult result , CCHContextHubPush *contextHubPush ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>application</Name>
					<Abstract type="html">The UIApplication that received the remote notification.</Abstract>
				</Parameter><Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The NSDictionary that was delivered with the remote notification.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A completion block that is executed when the context sync is completed.  The CCHContextHubPush BOOL indicates if the push notification was generated by ContextHub.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/application:didReceiveRemoteNotification:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
        
	</File>
</Tokens>