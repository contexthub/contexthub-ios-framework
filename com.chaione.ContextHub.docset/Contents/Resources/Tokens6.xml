<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCHSensorPipeline.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCHSensorPipeline</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipeline monitors events as they are triggered.  You can use the CCHSensorPipline to gain access to the events before and after they are sent to the server, and gives you the ability to filter events and add custom data to events before they are sent to the ContextHub server.
As events are triggered on the device, the framework will take assemble a dictionary of that includes data about the event.
The CCHSensorPipeline will call datasource and delegate lifecycle methods and post lifecycle notifications.</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
            
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCHSensorPipeline/sharedInstance</TokenIdentifier>
			<Abstract type="html">Returns the singleton instnace of the CCHSensorPipeline</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/triggerEvent:completionHandler:</TokenIdentifier>
			<Abstract type="html">This method give you the ability to trigger custom events on the ContextHub sensor pipeline</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>- (void)triggerEvent:(id)event completionHandler:(id)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>event</Name>
					<Abstract type="html">The event that you want to send to the server.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">(optional) Called when the event is created.  If an error occurs, the NSError wil be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/triggerEvent:completionHandler:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/synchronize:</TokenIdentifier>
			<Abstract type="html">Calling synchronize will tell the SDK to check for server-side context changes and will update monitored regions.
The method gives you a way to load new context information if you are not using background push notifictions.</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>- (void)synchronize:(id)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">(optional) Called when the synchronization completes.  If an error occurs, the NSError wil be passed to the block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/synchronize:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/addSubscriptionForTags:</TokenIdentifier>
			<Abstract type="html">To enable automatic region monitoring for geofences and iBeacons you must subscribe to their tags.</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>- (BOOL)addSubscriptionForTags:(id)tags</Declaration>
			<Parameters>
				<Parameter>
					<Name>tags</Name>
					<Abstract type="html">The tags of the elements that you want to monitor.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns A boolean indicating that the tags were added successfully.</Abstract></ReturnValue>
			<Anchor>//api/name/addSubscriptionForTags:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/removeSubscriptionForTags:</TokenIdentifier>
			<Abstract type="html">To disable automatic region monitoring for geofences and beacons, you must remove subscriptions.</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>- (BOOL)removeSubscriptionForTags:(id)tags</Declaration>
			<Parameters>
				<Parameter>
					<Name>tags</Name>
					<Abstract type="html">The tags of the elements that you want to stop monitoring.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns A boolean indicating that the tags were removed successfully.</Abstract></ReturnValue>
			<Anchor>//api/name/removeSubscriptionForTags:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/subscriptions</TokenIdentifier>
			<Abstract type="html">Returns an array of the tags that you have subscribed to.</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>- (NSArray *)subscriptions</Declaration>
			
			<ReturnValue><Abstract type="html">Returns an array of the tags that you have subscribed to.</Abstract></ReturnValue>
			<Anchor>//api/name/subscriptions</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/setDelegate:</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipelineDelegate</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;CCHSensorPipelineDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/delegate</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipelineDelegate</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;CCHSensorPipelineDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCHSensorPipeline/delegate</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipelineDelegate</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;CCHSensorPipelineDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/setDataSource:</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipelineDataSource</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;CCHSensorPipelineDataSource&gt; dataSource</Declaration>
			
			
			<Anchor>//api/name/dataSource</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCHSensorPipeline/dataSource</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipelineDataSource</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;CCHSensorPipelineDataSource&gt; dataSource</Declaration>
			
			
			<Anchor>//api/name/dataSource</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCHSensorPipeline/dataSource</TokenIdentifier>
			<Abstract type="html">The CCHSensorPipelineDataSource</Abstract>
			<DeclaredIn>CCHSensorPipeline.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;CCHSensorPipelineDataSource&gt; dataSource</Declaration>
			
			
			<Anchor>//api/name/dataSource</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
        
        
	</File>
</Tokens>